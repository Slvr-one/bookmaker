pipeline { /** product div*/
    options { /** for release only */
        timestamps()
        timeout(time:5, unit:'MINUTES')
    }

    agent any
    environment {
        ARTI = "artifactory:8081/libs-snapshot-local/com/lidar"
    }
    tools { 
        maven 'maven-3.6.2'
        jdk 'jdk-8'
    }
    triggers {
        gitlab(triggerOnPush: true,)
    }
    stages {
        stage("0 - pre") {
            steps {
                deleteDir()
                checkout scm
            }
        }
        stage("1 - maven semver") {
            when { branch "release/*" }
            steps {
                echo "---- tagging for ${BRANCH_NAME} branch ----"
                sshagent(['gitlab_get']) {
                    sh "git fetch -t || true" //in sinc with romote repo
                }
                script {//get latest tag commited to current branch, increment patch by 1 if branch exist(therefor has a latest), otherwise first patch is ".0"
                    VER = BRANCH_NAME.split('\\/')[1]
                    HIGHEST = sh(script: "git tag -l --sort=v:refname \"${VER}.*\" | tail -1", returnStdout: true).trim()
                    if (HIGHEST.isEmpty()) {
                        PATCH = ".0"
                        LATEST = VER + PATCH
                    } else {
                        LATEST = HIGHEST.split('\\.')
                        LATEST[2] = LATEST[2].toInteger() + 1
                        LATEST = LATEST.join('.')
                    }
                    sh "mvn versions:set -DnewVersion=${LATEST}"
                    sh "mvn dependency:list"
                    //sh "mvn versions:commit"// to remove the backup copy while the versions:revert goal will restore the backup copy
                }
            }
        }
        stage("2 - Build and unit test") {
            when { branch "release/*" }
            steps {
                //sh "mvn clean compile"
                //sh "mvn clean test"
                sh "mvn clean package"
            }
        }
        stage("3 - E2E tests") {
            when { branch "release/*" }
            steps {
                configFileProvider([configFile(fileId: 'maven_s', variable: 'maven_s')]) {
                sh "mvn -s $maven_s dependency:get -Dartifact=com.lidar:simulator:99-SNAPSHOT:jar -Ddest=simulator.jar"
                }
                sh "mv tests-full.txt tests.txt"//manualy copied from testing/.. might not be practicle
                sh "unzip ./target/leader-*.zip -d ."// extract to here
                sh "java -cp simulator.jar:analytics-99-SNAPSHOT.jar:telemetry-99-SNAPSHOT.jar com.lidar.simulation.Simulator"
            }
        }
        stage("4 - Publish to artifactory") {
            when { branch "release/*" }
            steps {
                // withCredentials([usernamePassword(credentialsId: 'arti_jenkins_user_pass', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                //     sh "docker login -u $USER -p $PASS $ARTI/simulator/99-SNAPSHOT"
                //     sh "curl -u $user:$pass -X GET \"http://$ARTI/\" "
                //     sh "mvn deploy -DskipTests"
                // }
                configFileProvider([configFile(fileId: 'maven_s', variable: 'maven_s')]) {
                    sh "mvn -s $maven_s deploy -DskipTests"
                }


            }
        }
        stage("5 - tag to repo") {
            when { branch "release/*" }
            steps {
                sh "git clean -xf && git tag $LATEST"
                sshagent(['gitlab_get']) {
                    sh "git push --tags"
                }
            }
        }

    }
     post {
        success {
            echo "its a success!"
        }
        failure {
            echo "its a failure.."
        }
        always {
            echo "will get this done"
            //cleanWs()
        }
    }
}